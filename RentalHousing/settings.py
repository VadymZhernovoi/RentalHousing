"""
Django settings for RentalHousing project.

Generated by 'django-admin startproject' using Django 5.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
import os
from pathlib import Path
from environ import Env
from datetime import timedelta

from apps import users

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# ENV end MODE definition
env = Env(
    DJANGO_ENV=(str, "dev"),        # dev | prod
    DEBUG=(bool, False),
)
Env.read_env(BASE_DIR / ".env")

ENV = env("DJANGO_ENV").lower()     # "dev" или "prod"
DEBUG = env.bool("DEBUG", default=(ENV == "dev"))

PAST_TIME_POSSIBLE = DEBUG          # to debug the creation of reviews

SECRET_KEY = env("SECRET_KEY", default="__dev_only_change_me__")


# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'django_filters',
    'rest_framework_simplejwt',
    'rest_framework_simplejwt.token_blacklist',
    'apps.bookings.apps.BookingsConfig',
    'apps.users.apps.UsersConfig',
    'apps.reviews.apps.ReviewsConfig',
    'apps.listings.apps.SearchingConfig',
    'apps.statistics.apps.StatisticsConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'RentalHousing.middleware.CsrfBypassForApi',
    'RentalHousing.middleware.JWTAuthenticationMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
]

# user model
AUTH_USER_MODEL = "users.User"

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": ("rest_framework_simplejwt.authentication.JWTAuthentication",),
    "DEFAULT_PERMISSION_CLASSES": ("rest_framework.permissions.AllowAny",),
    "DEFAULT_FILTER_BACKENDS": (
        "django_filters.rest_framework.DjangoFilterBackend",
        "rest_framework.filters.SearchFilter",
        "rest_framework.filters.OrderingFilter",
    ),
    "DEFAULT_PAGINATION_CLASS": "RentalHousing.pagination.DefaultPagination",
    "PAGE_SIZE": 10,
}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=120),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'AUTH_HEADER_TYPES': ('Bearer',),
}


INSTALLED_APPS += [
    "drf_spectacular",
    "drf_spectacular_sidecar",
]

REST_FRAMEWORK.update({
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
})

SPECTACULAR_SETTINGS = {
    "TITLE": "RentalHousing API",
    "DESCRIPTION": "Backend API for listings, bookings, reviews with roles/groups.",
    "VERSION": "1.0.0",
    "SERVE_INCLUDE_SCHEMA": False,
    "SCHEMA_PATH_PREFIX": r"/api/v1", # prefix API
    "COMPONENT_SPLIT_REQUEST": True,
    "SECURITY": [{
        "bearerAuth": [],
        "jwtCookieAuth": [],
    }],
    "AUTHENTICATION_WHITELIST": [
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ],
    "SERVE_PERMISSIONS": ["rest_framework.permissions.AllowAny"],
    "POSTPROCESSING_HOOKS": [],
    "SECURITY_SCHEMES": {
        "bearerAuth": {
            "type": "http",
            "scheme": "bearer",
            "bearerFormat": "JWT",
        },
        "jwtCookieAuth": {
            "type": "apiKey",
            "in": "cookie",
            "name": "access_token",
            "description": "JWT placed in HttpOnly cookie 'access_token'",
        },
    },
}


TEMPLATES = [
    {'BACKEND': 'django.template.backends.django.DjangoTemplates',
     'DIRS': [BASE_DIR / 'templates'],
     'APP_DIRS': True,
     'OPTIONS': {
         'context_processors': [
             'django.template.context_processors.request',
             'django.contrib.auth.context_processors.auth',
             'django.contrib.messages.context_processors.messages',
         ],
        },
     },
]

#WSGI_APPLICATION = 'RentalHousing.wsgi.application'
#ROOT_URLCONF = 'RentalHousing.urls'

ROOT_URLCONF = "RentalHousing.urls"
WSGI_APPLICATION = "RentalHousing.wsgi.application"
# ASGI_APPLICATION = "RentalHousing.asgi.application"

# Database
def mysql_conf():
    try:
        return {
            "ENGINE": "django.db.backends.mysql",
            "NAME": os.environ["MYSQL_DATABASE"],
            "USER": os.environ["MYSQL_USER"],
            "PASSWORD": os.environ["MYSQL_PASSWORD"],
            "HOST": os.environ.get("MYSQL_HOST", "localhost"),
            "PORT": os.environ.get("MYSQL_PORT", "3306"),
            "OPTIONS": {"charset": "utf8mb4"},
        }
    except KeyError as e:
        raise RuntimeError(f"DB environment variables not found: {e.args[0]}")

DEFAULT_FROM_EMAIL = "no-reply@example.com"

# ALLOWED_HOSTS = env.list("ALLOWED_HOSTS", default=["localhost", "127.0.0.1"] if ENV == "dev" else [])
if ENV == "prod":
    ALLOWED_HOSTS = [a_hosts.strip() for a_hosts in os.environ.get("ALLOWED_HOSTS", "").split(",") if a_hosts.strip()]
    DATABASES = {"default": mysql_conf()}
    SECURE_SET_COOKIE = True
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend' # ?
    EMAIL_HOST = 'smtp.gmail.com'
    EMAIL_PORT = 587
    EMAIL_USE_TLS = True
    EMAIL_HOST_USER = 'your_email@gmail.com'
    EMAIL_HOST_PASSWORD = 'your_password'
else:
    ALLOWED_HOSTS = [a_hosts.strip() for a_hosts in os.environ.get("ALLOWED_HOSTS", "localhost,127.0.0.1").split(",") if a_hosts.strip()]
    DATABASES = {"default": {"ENGINE": "django.db.backends.sqlite3", "NAME": BASE_DIR / "db.sqlite3",}}
    SECURE_SET_COOKIE = False
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',},
]

# Internationalization

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
STATIC_URL = "/static/"
STATIC_ROOT = BASE_DIR / "staticfiles"
MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"

# # LOGGING
# LOGGING = {
#     "version": 1,
#     "disable_existing_loggers": False,
#     "handlers": {"console": {"class": "logging.StreamHandler"}},
#     "root": {"handlers": ["console"], "level": "DEBUG" if DEBUG else "INFO"},
# }
LOG_DIR = BASE_DIR / "logs"
LOG_DIR.mkdir(exist_ok=True)

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "console": {
            "format": "[%(asctime)s] %(levelname)s [%(name)s] %(lineno)s %(message)s",
        },
        "http": {
            "format": "[%(asctime)s] %(levelname)s %(message)s",
        },
        "db": {
            "format": "[%(asctime)s] SQL: %(message)s",
        },
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "formatter": "console",
        },
        "http_file": {
            "class": "logging.handlers.RotatingFileHandler",
            "filename": str(LOG_DIR / "http_logs.log"),
            "backupCount": 5,
            "encoding": "utf-8",
            "formatter": "http",
        },
        "db_file": {
            "class": "logging.handlers.RotatingFileHandler",
            "filename": str(LOG_DIR / "db_logs.log"),
            "backupCount": 5,
            "encoding": "utf-8",
            "formatter": "db",
        },
    },
    "loggers": {
        "django": {
            "handlers": ["console"],
            "level": "INFO",
            "propagate": False,
        },
        "django.server": {
            "handlers": ["console", "http_file"],
            "level": "WARNING",
            "propagate": False,
        },
        "django.db.backends": {
            "handlers": ["db_file"],
            "level": "ERROR",
            "propagate": False,
        },
    },
}

# Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

DEFAULT_SPAN_DAYS_MAX = 365
"""
STATIC_URL = '/static/'

if not DEBUG:
    STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

    STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'
"""